name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render
      run: |
        echo "Deploying backend to Render..."
        # Render auto-deploys when connected to GitHub
        # Manual trigger can use Render API with RENDER_API_KEY secret
        if [ -n "${{ secrets.RENDER_API_KEY }}" ]; then
          echo "Render API key found - triggering deployment"
          # Add Render API deployment logic here if needed
        else
          echo "Render will auto-deploy from this push"
        fi
    
    - name: Verify backend deployment
      run: |
        echo "Backend deployment initiated"
        echo "Check Render dashboard for status"

  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Vercel
      run: |
        echo "Deploying frontend to Vercel..."
        # Vercel auto-deploys when connected to GitHub
        # Manual trigger can use Vercel CLI with VERCEL_TOKEN secret
        if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "Vercel token found - deployment available"
          # Add Vercel CLI deployment logic here if needed
        else
          echo "Vercel will auto-deploy from this push"
        fi
    
    - name: Verify frontend deployment
      run: |
        echo "Frontend deployment initiated"
        echo "Check Vercel dashboard for status"

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
    - name: Deployment complete
      run: |
        echo "ðŸš€ Deployment complete!"
        echo "Backend: Render"
        echo "Frontend: Vercel"
        echo "Automation: Scheduled via Render Cron"
